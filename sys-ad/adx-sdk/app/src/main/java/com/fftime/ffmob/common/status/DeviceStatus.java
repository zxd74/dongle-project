package com.fftime.ffmob.common.status;import java.util.Locale;import android.content.Context;import android.content.res.Configuration;import android.location.Criteria;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.wifi.WifiManager;import android.os.Build;import android.os.Bundle;import android.provider.Settings;import android.telephony.TelephonyManager;import android.util.DisplayMetrics;import android.util.Log;import android.webkit.WebView;import com.fftime.ffmob.util.IpUtils;import com.fftime.ffmob.util.NetUtils;import com.fftime.ffmob.util.StringUtil;public class DeviceStatus {    public static final String UNKNOWN_DEVICEID = "";    private String language;    private int deviceWidth;    private int deviceHeight;    private int deviceDensity;    private String phoneNet;    private String dataNet;    private String did;    private String ip;    private int deviceType;    private String userAgent;    private String osv;    private String androidId;    private WebView defaultWebview;    public String getOsv() {        try {            if (osv == null) {                osv = Build.VERSION.RELEASE;            }        } catch (Throwable ex) {        }        return osv;    }    // lat    private volatile String lat;    // lng    private volatile String lng;    public String getIp() {        try {            if (ip == null) {                ip = IpUtils.getIp();            }            return ip;        } catch (Throwable ex) {        }        return null;    }    public String getUserAgent() {        if (userAgent == null) return StringUtil.EMPTY;        //Log.i("deviceStatus",userAgent);        return userAgent;    }    //1-phone, 2-平板    public int getDeviceType() {        if (deviceType == 0) {            boolean isPad = (context.getResources().getConfiguration().screenLayout                    & Configuration.SCREENLAYOUT_SIZE_MASK)                    >= Configuration.SCREENLAYOUT_SIZE_LARGE;            if (isPad) {                deviceType = 2;            } else {                deviceType = 1;            }        }        return deviceType;    }    // 机型    final public String model = Build.MODEL;    public final String manufactory = Build.MANUFACTURER;    private Context context;    public DeviceStatus(Context context) {        this.context = context;        this.init(context);    }    private void init(Context context) {        DisplayMetrics dm = getDisplayMetrics(context);        this.deviceDensity = getDeviceDensity(dm);        this.deviceWidth = getDeviceWidth(dm);        this.deviceHeight = getDeviceHeight(dm);        this.userAgent = getUserAgent();        // 启动位置Listener        this.celloctLoc();        try {            this.defaultWebview = new WebView(context.getApplicationContext());            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {                defaultWebview.getSettings().setSafeBrowsingEnabled(false);            }            this.userAgent = defaultWebview.getSettings().getUserAgentString();        } catch (Throwable ex) {            //DO NOTHING        }    }    /**     * 初始化Location 采集器的功能     */    private void celloctLoc() {        try {            final LocationManager lm =                    (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);            if (lm == null) {                return;            }            Criteria criteria = new Criteria();            criteria.setAccuracy(Criteria.ACCURACY_COARSE);            criteria.setAltitudeRequired(false);            criteria.setBearingRequired(false);            criteria.setCostAllowed(true);            criteria.setPowerRequirement(Criteria.POWER_LOW);            Location location = null;            String provider = null;            try {                provider = lm.getBestProvider(criteria, true);                location = lm.getLastKnownLocation(provider);            } catch (Throwable e) {            }            if (location != null) {                lat = "" + location.getLatitude();                lng = "" + location.getLongitude();            } else {                final LocationListener lupdate = new LocationListener() {                    @Override                    public void onStatusChanged(String provider, int status, Bundle extras) {                    }                    @Override                    public void onProviderEnabled(String provider) {                    }                    @Override                    public void onProviderDisabled(String provider) {                    }                    @Override                    public void onLocationChanged(Location location) {                        lat = "" + location.getLatitude();                        lng = "" + location.getLongitude();                        lm.removeUpdates(this);                    }                };                try {                    lm.requestLocationUpdates(provider, 2000, 7000, lupdate);                } catch (Throwable e) {                }            }        } catch (Throwable e) {        }    }    public String getLat() {        return lat;    }    public String getLng() {        return lng;    }    /**     * did = md5(imei) or ""     *     * @return     */    public String getDid() {        if (did == null) {            try {                TelephonyManager tm =                        (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);                String imei = tm.getDeviceId();                if (StringUtil.isEmpty(imei)) {                    //did = "_" + UNKNOWN_DEVICEID;                    did = StringUtil.EMPTY;                } else {                    did = tm.getDeviceId();                }            } catch (Exception e) {                Log.d("devicestatus", "get deviceid error", e);            }        }        return did;    }    /**     * 获取设备android版本     *     * @return     */    public int getAndroidVersion() {        try {            return Build.VERSION.SDK_INT;        } catch (Exception e) {            return 3;        }    }    /**     * 获取语言     *     * @return     */    public String getLanguage() {        if (language == null) {            Locale loc = Locale.getDefault();            language = loc.getLanguage().toLowerCase(Locale.US);            if (language.length() == 0) {                language = "en";            }        }        return language;    }    private int getDeviceWidth(DisplayMetrics dm) {        return dm.widthPixels;    }    private int getDeviceHeight(DisplayMetrics dm) {        return dm.heightPixels;    }    /**     * 设备屏幕密度     *     * @param context     * @return     */    private int getDeviceDensity(DisplayMetrics dm) {        if (this.getAndroidVersion() > 3) {            return dm.densityDpi;        } else {            return 120;        }    }    public int getDeviceWidth() {        return deviceWidth;    }    public int getDeviceHeight() {        return deviceHeight;    }    public int getDeviceDensity() {        return deviceDensity;    }    private String getOperator() {        String operator = null;        try {            TelephonyManager telm =                    (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);            operator = telm.getNetworkOperator();        } catch (Exception e) {        }        return operator;    }    private String getPhoneNet() {        try {            TelephonyManager telm =                    (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);            phoneNet = "" + telm.getNetworkType();        } catch (Exception e) {        }        return phoneNet;    }    public String getDataNet() {        NetworkInfo netInfo = null;        try {            ConnectivityManager cm =                    (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);            netInfo = cm.getActiveNetworkInfo();        } catch (Exception e) {        }        if (netInfo == null) {            return null;        }        String res = null;        switch (netInfo.getType()) {            case ConnectivityManager.TYPE_MOBILE:                res = "ed";                break;            case ConnectivityManager.TYPE_WIFI:                res = "wi";                break;            default:                res = "unknow";        }        dataNet = res;        return dataNet;    }    private DisplayMetrics getDisplayMetrics(Context ctxt) {        return ctxt.getResources().getDisplayMetrics();    }    public Carrier getCarrier() {        String op = getOperator();        if (op != null) {            if (op.equals("46000") || op.equals("46002") || op.equals("46004")                    || op.equals("46007") || op.equals("46020")) {                return Carrier.CMCC;            }            if (op.equals("46001") || op.equals("46006") || op.equals("46009")) {                return Carrier.UNICOM;            }            if (op.equals("46003") || op.equals("46005") || op.equals("46011")) {                return Carrier.TELECOM;            }        }        return Carrier.UNKNOWN;    }    public int getConnectType() {        return NetUtils.getNetworkState(context);    }    public String getAndoidId() {        if (androidId != null) return androidId;        try {            androidId = Settings.System.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);            return androidId;        } catch (Throwable ex) {            Log.e("DeviceStatus", "获取android id异常");        }        return StringUtil.EMPTY;    }    public String getMac() {        try {            return NetUtils.getMac(this.context);        } catch (Exception ex) {        }        return StringUtil.EMPTY;    }}
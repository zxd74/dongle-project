<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.iwanvi.nvwa.dao.QuotaBookMapper">
  <resultMap id="BaseResultMap" type="com.iwanvi.nvwa.dao.model.QuotaBook">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="cre_day" jdbcType="INTEGER" property="creDay" />
    <result column="level1" jdbcType="INTEGER" property="level1" />
    <result column="level2" jdbcType="INTEGER" property="level2" />
    <result column="level3" jdbcType="INTEGER" property="level3" />
    <result column="req" jdbcType="INTEGER" property="req" />
    <result column="requv" jdbcType="INTEGER" property="requv" />
    <result column="exp" jdbcType="INTEGER" property="exp" />
    <result column="expuv" jdbcType="INTEGER" property="expuv" />
    <result column="clk" jdbcType="INTEGER" property="clk" />
    <result column="clkuv" jdbcType="INTEGER" property="clkuv" />
    <result column="invest" jdbcType="BIGINT" property="invest" />
      <result column="item_id" jdbcType="INTEGER" property="itemId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, cre_day, level1, level2, level3, req, requv, exp, expuv, clk, clkuv, invest
  </sql>
  <select id="selectByExample" parameterType="com.iwanvi.nvwa.dao.model.QuotaBookExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from quota_book
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="rows != null">
      <if test="offset != null">
        limit ${offset}, ${rows}
      </if>
      <if test="offset == null">
        limit ${rows}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from quota_book
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from quota_book
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.iwanvi.nvwa.dao.model.QuotaBookExample">
    delete from quota_book
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.iwanvi.nvwa.dao.model.QuotaBook">
    insert into quota_book (id, cre_day, level1, 
      level2, level3, req, 
      requv, exp, expuv, 
      clk, clkuv, invest)
    values (#{id,jdbcType=INTEGER}, #{creDay,jdbcType=INTEGER}, #{level1,jdbcType=INTEGER}, 
      #{level2,jdbcType=INTEGER}, #{level3,jdbcType=INTEGER}, #{req,jdbcType=INTEGER}, 
      #{requv,jdbcType=INTEGER}, #{exp,jdbcType=INTEGER}, #{expuv,jdbcType=INTEGER}, 
      #{clk,jdbcType=INTEGER}, #{clkuv,jdbcType=INTEGER}, #{invest,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="com.iwanvi.nvwa.dao.model.QuotaBook">
    insert into quota_book
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="creDay != null">
        cre_day,
      </if>
      <if test="level1 != null">
        level1,
      </if>
      <if test="level2 != null">
        level2,
      </if>
      <if test="level3 != null">
        level3,
      </if>
      <if test="req != null">
        req,
      </if>
      <if test="requv != null">
        requv,
      </if>
      <if test="exp != null">
        exp,
      </if>
      <if test="expuv != null">
        expuv,
      </if>
      <if test="clk != null">
        clk,
      </if>
      <if test="clkuv != null">
        clkuv,
      </if>
      <if test="invest != null">
        invest,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="creDay != null">
        #{creDay,jdbcType=INTEGER},
      </if>
      <if test="level1 != null">
        #{level1,jdbcType=INTEGER},
      </if>
      <if test="level2 != null">
        #{level2,jdbcType=INTEGER},
      </if>
      <if test="level3 != null">
        #{level3,jdbcType=INTEGER},
      </if>
      <if test="req != null">
        #{req,jdbcType=INTEGER},
      </if>
      <if test="requv != null">
        #{requv,jdbcType=INTEGER},
      </if>
      <if test="exp != null">
        #{exp,jdbcType=INTEGER},
      </if>
      <if test="expuv != null">
        #{expuv,jdbcType=INTEGER},
      </if>
      <if test="clk != null">
        #{clk,jdbcType=INTEGER},
      </if>
      <if test="clkuv != null">
        #{clkuv,jdbcType=INTEGER},
      </if>
      <if test="invest != null">
        #{invest,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.iwanvi.nvwa.dao.model.QuotaBookExample" resultType="java.lang.Long">
    select count(*) from quota_book
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update quota_book
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.creDay != null">
        cre_day = #{record.creDay,jdbcType=INTEGER},
      </if>
      <if test="record.level1 != null">
        level1 = #{record.level1,jdbcType=INTEGER},
      </if>
      <if test="record.level2 != null">
        level2 = #{record.level2,jdbcType=INTEGER},
      </if>
      <if test="record.level3 != null">
        level3 = #{record.level3,jdbcType=INTEGER},
      </if>
      <if test="record.req != null">
        req = #{record.req,jdbcType=INTEGER},
      </if>
      <if test="record.requv != null">
        requv = #{record.requv,jdbcType=INTEGER},
      </if>
      <if test="record.exp != null">
        exp = #{record.exp,jdbcType=INTEGER},
      </if>
      <if test="record.expuv != null">
        expuv = #{record.expuv,jdbcType=INTEGER},
      </if>
      <if test="record.clk != null">
        clk = #{record.clk,jdbcType=INTEGER},
      </if>
      <if test="record.clkuv != null">
        clkuv = #{record.clkuv,jdbcType=INTEGER},
      </if>
      <if test="record.invest != null">
        invest = #{record.invest,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update quota_book
    set id = #{record.id,jdbcType=INTEGER},
      cre_day = #{record.creDay,jdbcType=INTEGER},
      level1 = #{record.level1,jdbcType=INTEGER},
      level2 = #{record.level2,jdbcType=INTEGER},
      level3 = #{record.level3,jdbcType=INTEGER},
      req = #{record.req,jdbcType=INTEGER},
      requv = #{record.requv,jdbcType=INTEGER},
      exp = #{record.exp,jdbcType=INTEGER},
      expuv = #{record.expuv,jdbcType=INTEGER},
      clk = #{record.clk,jdbcType=INTEGER},
      clkuv = #{record.clkuv,jdbcType=INTEGER},
      invest = #{record.invest,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.iwanvi.nvwa.dao.model.QuotaBook">
    update quota_book
    <set>
      <if test="creDay != null">
        cre_day = #{creDay,jdbcType=INTEGER},
      </if>
      <if test="level1 != null">
        level1 = #{level1,jdbcType=INTEGER},
      </if>
      <if test="level2 != null">
        level2 = #{level2,jdbcType=INTEGER},
      </if>
      <if test="level3 != null">
        level3 = #{level3,jdbcType=INTEGER},
      </if>
      <if test="req != null">
        req = #{req,jdbcType=INTEGER},
      </if>
      <if test="requv != null">
        requv = #{requv,jdbcType=INTEGER},
      </if>
      <if test="exp != null">
        exp = #{exp,jdbcType=INTEGER},
      </if>
      <if test="expuv != null">
        expuv = #{expuv,jdbcType=INTEGER},
      </if>
      <if test="clk != null">
        clk = #{clk,jdbcType=INTEGER},
      </if>
      <if test="clkuv != null">
        clkuv = #{clkuv,jdbcType=INTEGER},
      </if>
      <if test="invest != null">
        invest = #{invest,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.iwanvi.nvwa.dao.model.QuotaBook">
    update quota_book
    set cre_day = #{creDay,jdbcType=INTEGER},
      level1 = #{level1,jdbcType=INTEGER},
      level2 = #{level2,jdbcType=INTEGER},
      level3 = #{level3,jdbcType=INTEGER},
      req = #{req,jdbcType=INTEGER},
      requv = #{requv,jdbcType=INTEGER},
      exp = #{exp,jdbcType=INTEGER},
      expuv = #{expuv,jdbcType=INTEGER},
      clk = #{clk,jdbcType=INTEGER},
      clkuv = #{clkuv,jdbcType=INTEGER},
      invest = #{invest,jdbcType=BIGINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.iwanvi.nvwa.dao.model.QuotaBookExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <include refid="Base_Column_List" />
    from quota_book
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into quota_book
    (id, cre_day, level1, level2, level3, req, requv, exp, expuv, clk, clkuv, invest)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.id,jdbcType=INTEGER}, #{item.creDay,jdbcType=INTEGER}, #{item.level1,jdbcType=INTEGER}, 
        #{item.level2,jdbcType=INTEGER}, #{item.level3,jdbcType=INTEGER}, #{item.req,jdbcType=INTEGER}, 
        #{item.requv,jdbcType=INTEGER}, #{item.exp,jdbcType=INTEGER}, #{item.expuv,jdbcType=INTEGER}, 
        #{item.clk,jdbcType=INTEGER}, #{item.clkuv,jdbcType=INTEGER}, #{item.invest,jdbcType=BIGINT}
        )
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    insert into quota_book (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'id'.toString() == column.value">
          #{item.id,jdbcType=INTEGER}
        </if>
        <if test="'cre_day'.toString() == column.value">
          #{item.creDay,jdbcType=INTEGER}
        </if>
        <if test="'level1'.toString() == column.value">
          #{item.level1,jdbcType=INTEGER}
        </if>
        <if test="'level2'.toString() == column.value">
          #{item.level2,jdbcType=INTEGER}
        </if>
        <if test="'level3'.toString() == column.value">
          #{item.level3,jdbcType=INTEGER}
        </if>
        <if test="'req'.toString() == column.value">
          #{item.req,jdbcType=INTEGER}
        </if>
        <if test="'requv'.toString() == column.value">
          #{item.requv,jdbcType=INTEGER}
        </if>
        <if test="'exp'.toString() == column.value">
          #{item.exp,jdbcType=INTEGER}
        </if>
        <if test="'expuv'.toString() == column.value">
          #{item.expuv,jdbcType=INTEGER}
        </if>
        <if test="'clk'.toString() == column.value">
          #{item.clk,jdbcType=INTEGER}
        </if>
        <if test="'clkuv'.toString() == column.value">
          #{item.clkuv,jdbcType=INTEGER}
        </if>
        <if test="'invest'.toString() == column.value">
          #{item.invest,jdbcType=BIGINT}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
    <select id="sumWithDate" parameterType="java.util.Map" resultMap="BaseResultMap">
        select sum(exp) exp, sum(req) req, sum(clk) clk, sum(requv) requv, sum(expuv) expuv,
        sum(clkuv) clkuv, sum(invest) invest, max(level1) level1, cre_day
        from quota_book
        <where>
            <trim prefixOverrides="and">
                <if test="sDate != null and eDate != null">
                    and cre_day between ${sDate} and ${eDate}
                </if>
                <if test="level1s != null and level1s.size > 0">
                    and level1 in (
                    <foreach collection="level1s" item="item" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
                <if test="level2s != null and level2s.size > 0">
                    and level2 in (
                    <foreach collection="level2s" item="item" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
                <if test="level3s != null and level3s.size > 0">
                    and level3 in (
                    <foreach collection="level3s" item="item" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
            </trim>
        </where>
        group by cre_day
    </select>
    <select id="sumWithGroup" parameterType="java.util.Map" resultMap="BaseResultMap">
        select sum(exp) exp, sum(req) req, sum(clk) clk, sum(requv) requv, sum(expuv) expuv,
        sum(clkuv) clkuv, sum(invest) invest, max(level1) level1, ${groupItem} item_id
        from quota_book
        <where>
            <trim prefixOverrides="and">
                <if test="sDate != null and eDate != null">
                    and cre_day between ${sDate} and ${eDate}
                </if>
                <if test="level1s != null and level1s.size > 0">
                    and level1 in (
                    <foreach collection="level1s" item="item" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
                <if test="level2s != null and level2s.size > 0">
                    and level2 in (
                    <foreach collection="level2s" item="item" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
                <if test="level3s != null and level3s.size > 0">
                    and level3 in (
                    <foreach collection="level3s" item="item" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
            </trim>
        </where>
        <if test="groupItem != null">
            group by ${groupItem}
        </if>
    </select>
    <select id="detailReport" parameterType="java.util.Map" resultMap="BaseResultMap">
        select cre_day, sum(exp) exp, sum(req) req, sum(clk) clk, sum(requv) requv, sum(expuv) expuv,
        sum(clkuv) clkuv, sum(invest) invest
        from quota_book
        <where>
            <trim prefixOverrides="and">
                <if test="sDate != null and eDate != null">
                    and cre_day between ${sDate} and ${eDate}
                </if>
                <if test="level1s != null and level1s.size > 0">
                    and level1 in (
                    <foreach collection="level1s" item="item" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
                <if test="level2s != null and level2s.size > 0">
                    and level2 in (
                    <foreach collection="level2s" item="item" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
                <if test="level3s != null and level3s.size > 0">
                    and level3 in (
                    <foreach collection="level3s" item="item" separator=",">
                        #{item}
                    </foreach>
                    )
                </if>
            </trim>
        </where>
        group by cre_day
    </select>
</mapper>